using System;
namespace cap
{
    static class executable
    {
        static byte[] depacker =
        {
            0x01, 0x08, 0x0b, 0x08, 0x00, 0x00, 0x9e, 0x32, 0x30, 0x35, 0x39, 0x00, 0xa0, 0x00, 0x78, 0xe6,
            0x01, 0xb9, 0x30, 0x08, 0x99, 0xf3, 0x00, 0xc8, 0xd0, 0xf7, 0xa2, 0x00, 0xb9, 0x00, 0x00, 0x99,
            0x00, 0xff, 0xc8, 0xd0, 0xf7, 0xce, 0x1d, 0x08, 0xce, 0x20, 0x08, 0xca, 0xd0, 0xee, 0x4c, 0x00,
            0x01, 0x80, 0xad, 0x00, 0x00, 0xe6, 0xf5, 0xd0, 0x02, 0xe6, 0xf6, 0x60, 0x00, 0x00, 0x20, 0xf4,
            0x00, 0x91, 0xfe, 0xe6, 0xfe, 0xd0, 0x02, 0xe6, 0xff, 0x84, 0xec, 0x20, 0xcb, 0x01, 0x90, 0xee,
            0x20, 0xcb, 0x01, 0x90, 0x3b, 0x20, 0xcb, 0x01, 0x90, 0x23, 0xa9, 0xe0, 0x20, 0xcb, 0x01, 0x2a,
            0xb0, 0xfa, 0xf0, 0xdd, 0xe5, 0xfe, 0x49, 0xff, 0x85, 0xf1, 0x98, 0xe5, 0xff, 0x49, 0xff, 0x85,
            0xf2, 0xb1, 0xf1, 0xd0, 0xcc, 0xa9, 0x00, 0x85, 0x01, 0x58, 0x4c, 0x00, 0x00, 0x20, 0xf4, 0x00,
            0x4a, 0xf0, 0xf2, 0x85, 0xef, 0x84, 0xf0, 0xa9, 0x01, 0x2a, 0x85, 0xed, 0x84, 0xee, 0xd0, 0x3b,
            0x20, 0xd8, 0x01, 0xc9, 0x02, 0xd0, 0x09, 0xc4, 0xec, 0xd0, 0x05, 0x20, 0xd8, 0x01, 0x90, 0x2b,
            0x46, 0xec, 0xe9, 0x02, 0x85, 0xf0, 0x20, 0xf4, 0x00, 0x85, 0xef, 0x20, 0xd8, 0x01, 0xa5, 0xf0,
            0xd0, 0x08, 0x24, 0xef, 0x30, 0x15, 0xa9, 0x02, 0x90, 0x09, 0xc9, 0x05, 0x90, 0x0d, 0xc9, 0x7d,
            0x98, 0x69, 0x01, 0x65, 0xed, 0x85, 0xed, 0x90, 0x02, 0xe6, 0xee, 0xa9, 0x01, 0x85, 0xec, 0x38,
            0xa5, 0xfe, 0xe5, 0xef, 0x85, 0xf1, 0xa5, 0xff, 0xe5, 0xf0, 0x85, 0xf2, 0xa6, 0xee, 0xf0, 0x0e,
            0xb1, 0xf1, 0x91, 0xfe, 0xc8, 0xd0, 0xf9, 0xe6, 0xf2, 0xe6, 0xff, 0xca, 0xd0, 0xf2, 0xa6, 0xed,
            0xf0, 0x12, 0xb1, 0xf1, 0x91, 0xfe, 0xc8, 0xca, 0xd0, 0xf8, 0x18, 0x98, 0x65, 0xfe, 0x85, 0xfe,
            0x90, 0x02, 0xe6, 0xff, 0xa0, 0x00, 0x4c, 0x0d, 0x01, 0x06, 0xf3, 0xd0, 0x08, 0x48, 0x20, 0xf4,
            0x00, 0x2a, 0x85, 0xf3, 0x68, 0x60, 0x84, 0xee, 0xa9, 0x01, 0x20, 0xcb, 0x01, 0x2a, 0x26, 0xee,
            0x20, 0xcb, 0x01, 0xb0, 0xf5, 0x85, 0xed, 0x60
        };

        static internal byte[] make(byte[] data, int destination, int startaddress, int cpuport, int iflag)
        {
            var output = new byte[depacker.Length + data.Length];

            //depacker
            Array.Copy(depacker, output, depacker.Length);

            //packed data
            Array.Copy(data, 0, output, depacker.Length, data.Length);

            //pages of data to move
            output[0x1b] = (byte)((data.Length >> 8) + 1);

            //move data source address
            int movedatasrc = output.Length + 2049 - 2 - 256;
            output[0x1d] = (byte)(movedatasrc & 0xff);
            output[0x1e] = (byte)(movedatasrc >> 8);

            //move data destination address
            int movedatadst = 65536 - (data.Length);
            output[0x33] = (byte)(movedatadst & 0xff);
            output[0x34] = (byte)(movedatadst >> 8);

            //depack data destination
            output[0x3c] = (byte)(destination & 0xff);
            output[0x3d] = (byte)(destination >> 8);

            //cpu i/o port after depack
            output[0x76] = (byte)(cpuport & 0xff);

            //interrupt flag after depack
            output[0x79] = iflag == 1 ? (byte)0x78 : (byte)0x58;

            //start address after depack
            output[0x7b] = (byte)(startaddress & 0xff);
            output[0x7c] = (byte)(startaddress >> 8);

            return output;
        }
    }
}
